<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//amount of cubs in height
amountWidthCells = irandom_range(4, 7);
//amountHeightCells = irandom_range(1, 2);
switch(amountWidthCells){
    case 4: amountHeightCells = irandom_range(5, 7); break;
    case 5: amountHeightCells = irandom_range(7, 9); break;
    case 6: amountHeightCells = irandom_range(8, 10); break;
    case 7: amountHeightCells = irandom_range(9, 11); break;
}

//paramentes of walls
stick_width = sprite_get_width(s_stickWall);
stick_height = sprite_get_height(s_stickWall);
center = sprite_get_xoffset(s_stickWall);

//parametres of labirint
roomWidthCenter = room_width/2;
roomHeightCenter = room_height/2;

labirintWidth = amountWidthCells*stick_width;
labirintHeight = amountHeightCells*stick_width;

labirintX = roomWidthCenter - labirintWidth/2;
labirintY = roomHeightCenter - labirintHeight/2;

//labirint
randomize();

var stickY = labirintY + stick_width + center;

for (var a=0; a&lt;amountHeightCells-1; a++){
    var stickX = labirintX + stick_width + center;
    for (var b=0; b&lt;amountWidthCells-1; b++){
        var dir = irandom_range(0, 3)*90;
        with (instance_create(stickX, stickY, o_wallStick))
            phy_rotation = dir;
        stickX += stick_width;
    }
    stickY += stick_width;
}
    
borders_making();

players_create(global.amountOfPlayers);

//grid for testing
//global.grid = mp_grid_create(labirintX, labirintY, amountWidthCells, amountHeightCells, stick_width, stick_width);
instance_create(roomWidthCenter + stick_height/2, roomHeightCenter, o_center)

//window_set_size(1920, 1080);
//window_set_position(1920/16, 1080/16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//centralize view on center
view_object[0] = o_center;
view_hborder[0] = view_wview[0]/2;
view_vborder[0] = view_hview[0]/2;

//height controlling
if (labirintX-5 &lt; view_xview[0]){
    view_hview[0] += 16;
    view_wview[0] += 9;
}

if (labirintX-14 &gt; view_xview[0]){
    view_hview[0] -= 16;
    view_wview[0] -= 9;
}

/*if (labirintY-5 &lt; view_yview[0]){
    view_hview[0] += 9;
    view_wview[0] += 16;
}

if (labirintY-21 &gt; view_yview[0]){
    view_hview[0] -= 9;
    view_wview[0] -= 16;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_text(30, 30, view_wview[0]);
//draw_text(60, 30, view_hview[0]);
draw_text(30, 50, view_hview[0]);
//draw_text(60, 50, view_hport[0]);*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//draw grid
/*draw_set_alpha(.3);
mp_grid_draw(global.grid);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
